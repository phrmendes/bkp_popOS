---
- name: Backup configuration for PopOS 22.04
  become: true
  hosts: localhost
  connection: local

  vars:
    user: phrmendes
    python_version: 3.11.4
    nix_version: 2.17.0
    nix_build: nix-{{ nix_version }}-x86_64-linux
    nix_path: /nix/var/nix/profiles/default/bin
    home_manager_path: ~/.nix-profile/bin
    docker_keyring_path: /etc/apt/keyrings/docker.gpg
    tailscale_keyring_path: /usr/share/keyrings/tailscale-archive-keyring.gpg
    installer_checksum: sha256:1596ed46efae091388ed6db626c31f14fc1b703e5a552b00a9e68419edb8172d
    nix_installer_url: https://releases.nixos.org/nix/nix-{{ nix_version }}/{{ nix_build }}.tar.xz

  handlers:
    - name: Update nix channels
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-channel --update"
      changed_when: false

  tasks:
    - name: Custom facts
      set_fact:
        dpkg_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
        based_distribution: "{{ 'ubuntu' if ansible_distribution == 'Pop!_OS' else ansible_distribution }}"

    - name: Remove packages
      apt:
        autoremove: true
        state: absent
        name:
          - baobab
          - evince
          - fprintd
          - geary
          - gedit
          - gnome-calendar
          - gnome-contacts
          - gparted
          - libreoffice-common
          - libreoffice-core
          - simple-scan
          - totem

    - name: Add tailscale GPG apt key
      get_url:
        url: https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg
        dest: "{{ tailscale_keyring_path }}"

    - name: Add docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add repos
      apt_repository:
        state: present
        repo: "{{ item }}"
      with_items:
        - "deb https://download.docker.com/{{ ansible_system | lower }}/{{ based_distribution }} {{ ansible_distribution_release }} stable"
        - "deb [signed-by={{ tailscale_keyring_path }}] https://pkgs.tailscale.com/stable/{{ based_distribution }} {{ ansible_distribution_release }} main"

    - name: Install packages with apt
      apt:
        update_cache: true
        state: present
        name:
          - atool
          - catdoc
          - containerd.io
          - curl
          - docker-buildx-plugin
          - docker-ce
          - docker-ce-cli
          - docker-compose-plugin
          - exiftool
          - file
          - file-roller
          - fonts-dejavu
          - fonts-jetbrains-mono
          - gnome-tweaks
          - gzip
          - jq
          - libbz2-dev
          - libffi-dev
          - libfuse2
          - liblzma-dev
          - libncursesw5-dev
          - libreadline-dev
          - libsqlite3-dev
          - libssl-dev
          - libxml2-dev
          - libxmlsec1-dev
          - mediainfo
          - mlocate
          - nala
          - openssh-server
          - rar
          - tailscale
          - timeshift
          - tk-dev
          - uidmap
          - unrar
          - unzip
          - w3m
          - wget
          - xclip
          - xlsx2csv
          - xz-utils
          - zip
          - zlib1g-dev

    - name: Ensure group "docker" exists with correct gid
      group:
        name: docker
        state: present

    - name: Adding user to docker group
      user:
        name: phrmendes
        groups: docker
        append: yes
        state: present

    - name: Add the flathub remote repository
      become_user: "{{ user }}"
      community.general.flatpak_remote:
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        method: user
        name: flathub
        state: present

    - name: Install packages with flatpak
      become_user: "{{ user }}"
      community.general.flatpak:
        state: present
        method: user
        name:
          - ch.protonmail.protonmail-bridge
          - com.github.ransome1.sleek
          - com.protonvpn.www
          - org.wezfurlong.wezterm

    - name: Give WezTerm permissions to read home directory
      command:
        cmd: flatpak override --filesystem=home org.wezfurlong.wezterm
      changed_when: false

    - block:
        - name: Adding fingerprint repository
          apt_repository:
            repo: "ppa:uunicorn/open-fprintd"

        - name: Installing fingerprint packages
          apt:
            update_cache: true
            state: present
            name:
              - open-fprintd
              - fprintd-clients
              - python3-validity
      when: ansible_form_factor != "Desktop"

    - name: Create "~/Projects" directory
      file:
        path: ~/Projects
        state: directory

    - name: Clone backups repo
      git:
        repo: https://github.com/phrmendes/bkps.git
        dest: ~/Projects/bkps

    - name: Install nix package manager
      block:
        - name: Download installer
          get_url:
            url: "{{ nix_installer_url }}"
            dest: /tmp
            checksum: "{{ installer_checksum }}"

        - name: Extract installer
          unarchive:
            src: /tmp/{{ nix_build }}.tar.xz
            remote_src: true
            dest: /tmp

        - name: Run the installer
          become: true
          command:
            cmd: ./install --daemon </dev/null
            chdir: /tmp/{{ nix_build }}
            creates: "{{ nix_path }}/nix"

    - name: Check if home-manager is installed
      become_user: "{{ user }}"
      shell: "{{ nix_path }}/nix-env --query"
      register: nix_pkgs_list
      changed_when: false

    - name: Create home-manager symlinks
      become_user: "{{ user }}"
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      with_items:
        - src: ~/Projects/bkps/nix/home.nix
          dest: ~/.config/home-manager/home.nix
        - src: ~/Projects/bkps/nix/config.nix
          dest: ~/.config/nixpkgs/config.nix

    - name: Add home-manager channel
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager"
      when: "'home-manager' not in nix_pkgs_list.stdout"
      notify: Update nix channels

    - name: Install home-manager
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-shell '<home-manager>' -A install"
      when: "'home-manager' not in nix_pkgs_list.stdout"
      environment:
        NIXPKGS_ALLOW_UNFREE: "1"

    - name: Check if python is installed
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv version"
      register: pyenv_versions
      changed_when: false

    - name: Install python
      become_user: "{{ user }}"
      command: "{{ home_manager_path }}/pyenv install {{ python_version }}"
      when: python_version not in pyenv_versions.stdout

    - name: Set python global version
      become_user: "{{ user }}"
      command: "{{ home_manager_path }}/pyenv global {{ python_version }}"
      changed_when: false

    - name: Get python bin
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv which python"
      register: python_bin
      changed_when: false

    - name: Get pip bin
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv which pip"
      register: pip_bin
      changed_when: false

    - name: Install python packages
      become_user: "{{ user }}"
      pip:
        executable: "{{ pip_bin.stdout }}"
        name:
          - poetry
          - ptipython

    - name: Configure poetry to use virtualenvs inside projects
      become_user: "{{ user }}"
      command:
        cmd: "{{ python_bin.stdout }} -m poetry config virtualenvs.in-project true"
      changed_when: false

    - name: Install python debugger
      become_user: "{{ user }}"
      become: false
      pip:
        name: debugpy
        virtualenv: ~/.virtualenvs/debugpy

    - name: Enable systemd services
      systemd:
        name: "{{ item }}"
        state: started
      with_items:
        - docker.service
        - containerd.service
