---
- name: Backup configuration for PopOS 22.04
  become: true
  hosts: localhost
  connection: local

  vars:
    home_manager_path: ~/.nix-profile/bin
    nix_path: /nix/var/nix/profiles/default/bin
    python_version: 3.11.3
    user: phrmendes

  handlers:
    - name: update_system
      apt:
        update_cache: true
        upgrade: full

    - name: update_nix_channels
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-channel --update"
      changed_when: false

  tasks:
    - name: Remove packages
      apt:
        autoremove: true
        state: absent
        name:
          - baobab
          - evince
          - fprintd
          - geary
          - gedit
          - gnome-calendar
          - gnome-contacts
          - gparted
          - libreoffice-common
          - libreoffice-core
          - simple-scan
          - totem

    - name: Install tailscale repo
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
      with_items:
        - url: https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg
          dest: /usr/share/keyrings/tailscale-archive-keyring.gpg
        - url: https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list
          dest: /etc/apt/sources.list.d/tailscale.list
      notify:
        - update_system

    - name: Install packages with apt
      apt:
        state: present
        name:
          - atool
          - build-essential
          - ca-certificates
          - catdoc
          - curl
          - exiftool
          - file
          - file-roller
          - flatpak
          - fonts-dejavu
          - fonts-jetbrains-mono
          - gdebi-core
          - git
          - gnome-tweaks
          - gnupg
          - gzip
          - jq
          - libbz2-dev
          - libffi-dev
          - libfuse2
          - liblzma-dev
          - libncursesw5-dev
          - libreadline-dev
          - libsqlite3-dev
          - libssl-dev
          - libxml2-dev
          - libxmlsec1-dev
          - mediainfo
          - mlocate
          - nala
          - openssh-server
          - rar
          - tailscale
          - timeshift
          - tk-dev
          - uidmap
          - unrar
          - unzip
          - w3m
          - wget
          - xclip
          - xlsx2csv
          - xz-utils
          - zip
          - zlib1g-dev

    - name: Add the flathub remote repository
      become_user: "{{ user }}"
      community.general.flatpak_remote:
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        method: user
        name: flathub
        state: present

    - name: Install packages with flatpak
      become_user: "{{ user }}"
      community.general.flatpak:
        state: present
        method: user
        name:
          - ch.protonmail.protonmail-bridge
          - com.github.ransome1.sleek
          - com.protonvpn.www
          - org.wezfurlong.wezterm

    - name: Give WezTerm permissions to read home directory
      command:
        cmd: flatpak override --filesystem=home org.wezfurlong.wezterm
      changed_when: false

    - block:
        - name: Adding fingerprint repository
          apt_repository:
            repo: "ppa:uunicorn/open-fprintd"
          notify:
            - update_system

        - name: Installing fingerprint packages
          apt:
            state: present
            name:
              - open-fprintd
              - fprintd-clients
              - python3-validity
      when: ansible_form_factor != "Desktop"

    - name: Create "~/Projects" directory
      file:
        path: ~/Projects
        state: directory

    - name: Clone backups repo
      git:
        repo: https://github.com/phrmendes/bkps.git
        dest: ~/Projects/bkps

    - name: Check if home-manager is installed
      become_user: "{{ user }}"
      shell: "{{ nix_path }}/nix-env --query"
      register: nix_pkgs_list
      changed_when: false

    - name: Create home-manager symlinks
      become_user: "{{ user }}"
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      with_items:
        - src: ~/Projects/bkps/nix/home.nix
          dest: ~/.config/home-manager/home.nix
        - src: ~/Projects/bkps/nix/config.nix
          dest: ~/.config/nixpkgs/config.nix

    - name: Add home-manager channel
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager"
      when: "'home-manager' not in nix_pkgs_list.stdout"
      notify: update_nix_channels

    - name: Install home-manager
      become_user: "{{ user }}"
      command: "{{ nix_path }}/nix-shell '<home-manager>' -A install"
      when: "'home-manager' not in nix_pkgs_list.stdout"
      environment:
        NIXPKGS_ALLOW_UNFREE: "1"

    - name: Check if python is installed
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv version"
      register: pyenv_versions
      changed_when: false

    - name: Install python
      become_user: "{{ user }}"
      command: "{{ home_manager_path }}/pyenv install {{ python_version }}"
      when: python_version not in pyenv_versions.stdout

    - name: Set python global version
      become_user: "{{ user }}"
      command: "{{ home_manager_path }}/pyenv global {{ python_version }}"
      changed_when: false

    - name: Get python bin
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv which python"
      register: python_bin
      changed_when: false

    - name: Get pip bin
      become_user: "{{ user }}"
      shell: "{{ home_manager_path }}/pyenv which pip"
      register: pip_bin
      changed_when: false

    - name: Install python packages
      become_user: "{{ user }}"
      pip:
        executable: "{{ pip_bin.stdout }}"
        name:
          - poetry
          - ptipython

    - name: Configure poetry to use virtualenvs inside projects
      become_user: "{{ user }}"
      command:
        cmd: "{{ python_bin.stdout }} -m poetry config virtualenvs.in-project true"
      changed_when: false

    - name: Install python debugger
      become_user: "{{ user }}"
      become: false
      pip:
        name: debugpy
        virtualenv: ~/.virtualenvs/debugpy
