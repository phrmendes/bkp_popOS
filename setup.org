#+title: Pop!_OS Setup

* Pop!_OS configuration
** Variables

#+begin_src shell :tangle ./setup.sh

#!/usr/bin/env bash

MAIN_DIR="$(pwd)"
REQUIRED_PROGRAMS=(wget git zip unzip gzip curl file build-essential procps)
TO_REMOVE=(geary gnome-terminal gnome-orca evince totem xterm)
PROGRAMS_FILE="$MAIN_DIR/aux_files/apt-flatpak-programs.csv"
APT_PROGRAMS=()
FLATPAK_PROGRAMS=()

#+end_src

** Update system

#+begin_src shell :tangle ./setup.sh

sudo apt update -y
sudo apt full-upgrade -y

#+end_src

** Reading program files

#+begin_src shell :tangle ./setup.sh

while IFS= read line; do
    str_1=$(echo -e "${line%%,*}")
sudo apt dist-upgrade -y
    str_2=$(echo -e "${line##*,}")

    if [[ $str_2 = "apt" ]]; then
        APT_PROGRAMS+=("$str_1")
    else
        FLATPAK_PROGRAMS+=("$str_1")
    fi
done < "$PROGRAMS_FILE"

#+end_src

** Installing required programs

#+begin_src shell :tangle ./setup.sh

for app in "${REQUIRED_PROGRAMS[@]}"; do
    if [[ ! -x $(which "$app") ]]; then
        sudo apt install "$app" -y
    fi
done

#+end_src

** Removing locks and adding i386 architecture

#+begin_src shell :tangle ./setup.sh

sudo rm /var/lib/dpkg/lock-frontend
sudo rm /var/cache/apt/archives/lock
sudo dpkg --add-architecture i386

#+end_src

** Removing some Pop!_OS default programs

#+begin_src shell :tangle ./setup.sh

apt list --installed | grep libreoffice | cut -d "/" -f 1 | tr '\n' ' ' | xargs sudo apt remove -y

for program in "${TO_REMOVE[@]}"; do
    sudo apt remove "$program" -y
done

sudo apt autoremove -y

#+end_src

** Install Nix

#+begin_src shell :tangle ./setup.sh

sh <(curl -L https://nixos.org/nix/install) --daemon
echo 'export XDG_DATA_DIRS="$HOME/.nix-profile/share:$XDG_DATA_DIRS' >> "$HOME/.profile"
source "$HOME/.profile"

#+end_src

** Install SourceCodePro Nerd Font

#+begin_src shell :tangle ./setup.sh

sudo mkdir -p "/usr/share/fonts/truetype/sourcecodepro/"
sudo cp "$MAIN_DIR/aux_files/SauceCodePro.zip" "/usr/share/fonts/truetype/sourcecodepro/"
sudo cd "/usr/share/fonts/truetype/sourcecodepro/"
sudo unzip SauceCodePro.zip
sudo rm SauceCodePro.zip
sudo fc-cache
cd "$MAIN_DIR"

#+end_src

** Install apt and flatpak programs

#+begin_src shell :tangle ./setup.sh

for program in "${APT_PROGRAMS[@]}"; do
    sudo apt install "$program" -y
done

for program in "${FLATPAK_PROGRAMS[@]}"; do
    flatpak install "$program" -y
done

#+end_src

* home-manager setup

#+begin_src shell :tangle ./home-manager.sh

#!/usr/bin/env bash

nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
nix-channel --update
echo 'export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH}' >> "$HOME/.bashrc"

#+end_src

* config.nix

#+begin_src nix :tangle ./.dotfiles/.nixpkgs/config.nix

{ allowUnfree = true; }

#+end_src

* home.nix

#+begin_src nix :tangle ./.dotfiles/.config/nixpkgs/home.nix

{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  home = {
    stateVersion = "22.05";
    username = "${user}";
    homeDirectory = "/home/${user}";
    packages = with pkgs; [
      # TERMINAL PROGRAMS
      btop
      pandoc
      bat
      btop
      gh
      lazygit
      ripgrep
      fd
      sd
      tealdeer
      exa
      shellcheck
      alacritty
      ncdu
      starship
      quarto
      micromamba
      # PACKAGE MANAGERS
      flatpak
      cargo
      go
      nodejs
      # APPS
      emacs
      droidcam
      filezilla
      solaar
      bitwarden
      pcloud
      zotero
      spotify
      fragments
      kooha
      podman
      zathura
      cmdstan
      celluloid
      # OTHERS
      texlive.combined.scheme-minimal
    ];
  };

  programs = {
    fzf = {
      enable = true;
      enableZshIntegration = true;
    };
    zsh = {
      enable = true;
      enableAutosuggestions = true;
      enableSyntaxHighlighting = true;
      dirHashes = ''
      { proj = "$HOME/Projects" };
      ''
      shellAliases = {
        rm = "rm -i";
        cp = "cp -i";
        mv = "mv -i";
        mkdir = "mkdir -p";
        ls = "exa --icons";
        cat = "bat";
        stow_dotfiles = "stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles";
        nv = "nvim";
        lg = "lazygit";
      };
     };
    neovim = {
      enable = true;
      plugins = with pkgs.vimPlugins; [
        vim-nix
        vim-easymotion
        vim-commentary
        lightline-vim
        nerdcommenter
        ack-vim
        vim-gitgutter
        auto-pairs
        fzf-vim
        vim-polyglot
      ];
      extraConfig = ''
        set background=dark
        set clipboard=unnamedplus
        set completeopt=noinsert,menuone,noselect
        set cursorline
        set hidden
        set inccommand=split
        set mouse=a
        set number
        set relativenumber
        set splitbelow splitright
        set title
        set ttimeoutlen=0
        set wildmenu
        set expandtab
        set shiftwidth=2
        set tabstop=2
      '';
      vimAlias = true;
      vimdiffAlias = true;
    };
    starship = {
      enable = true;
      enableZshIntegration = true;
    };
    home-manager.enable = true;
  };
}

#+end_src

* Placing dotfiles and installing Doom Emacs

#+begin_src shell :tangle ./dotfiles.sh

#!/usr/bin/env bash

# home-manager
nix-shell '<home-manager>' -A install
rm "$HOME/.config/nixpkgs/home.nix"
stow --target="$HOME" --dir="$HOME/Projects/bkps" --stow .dotfiles
home-manager switch

# alacritty
nix-channel --add https://github.com/guibou/nixGL/archive/main.tar.gz nixgl && nix-channel --update

# doom emacs
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
"$HOME/.emacs.d/bin/doom" install
"$HOME/.emacs.d/bin/doom" sync

#+end_src

Updates: ~home-manager switch~ after applying changes to the ~*.nix~ files.

* R and Python packages with micromamba
