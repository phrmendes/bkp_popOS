#+title: NixOS Setup

* Installation script
:PROPERTIES:
:header-args: :tangle ./installation.sh
:END:

Download script: ~curl https://raw.githubusercontent.com/phrmendes/bkps/nixOS-laptop/installation.sh --output ~/installation.sh~

** Variables

#+begin_src shell :shebang #!/usr/bin/env bash
GITHUB_URL="https://raw.githubusercontent.com/phrmendes/bkps/nixOS-laptop"
NIX_FILES=("hardware-configuration.nix" "configuration.nix" "home.nix")
NIX_FILES_LOCATION="/mnt/etc/nixos/"
#+end_src

** Partitions
*** Create

#+begin_src shell 
sudo parted /dev/nvme0n1 -- mklabel gpt
sudo parted /dev/nvme0n1 -- mkpart primary 512MiB 100% # main partition
sudo parted /dev/nvme0n1 -- mkpart ESP fat32 1Mib 512MiB # efi
sudo parted /dev/nvme0n1 -- set 2 esp on
#+end_src

*** Encrypt

#+begin_src shell 
sudo cryptsetup luksFormat /dev/nvme0n1p1
sudo cryptsetup luksOpen /dev/nvme0n1p1 cryptroot
#+end_src

*** Format

#+begin_src shell 
sudo mkfs.ext4 -L nixos /dev/mapper/cryptroot
sudo mkfs.fat -F 32 -n boot /dev/nvme0n1p2
#+end_src

*** Mount

#+begin_src shell 
sudo mount /dev/mapper/cryptroot /mnt
sudo mkdir -p /mnt/boot
sudo mount /dev/nvme0n1p2 /mnt/boot
sudo mkdir -p /mnt/boot/efi
#+end_src

** Placing *.nix files

#+begin_src shell 
for i in "${NIX_FILES[@]}"; do
    sudo curl "$GITHUB_URL/$i" --output "$NIX_FILES_LOCATION/$i"
done
#+end_src

** Installation

#+begin_src shell 
sudo nixos-install
#+end_src

* Post-installation
:PROPERTIES:
:header-args: :tangle ./post-installation.sh
:END:
** Variables

#+begin_src shell :shebang #!/usr/bin/env bash
FLATPAK_PROGRAMS=("com.tutanota.Tutanota" "com.github.muriloventuroso.easyssh" "com.stremio.Stremio" "com.github.tchx84.Flatseal" "org.onlyoffice.desktopeditors" "org.gnome.Boxes")
MAIN_DIR="$(pwd)"
NIX_FILES=("hardware-configuration.nix" "configuration.nix" "home.nix")
#+end_src

** Creating symlinks to nix files

#+begin_src nix
sudo rm -r /etc/nixos/
sudo mkdir /etc/nixos/
#+end_src

#+begin_src shell
for file in "${NIX_FILES[@]}"; do
    sudo ln -s "$MAIN_DIR/$file" "/etc/nixos/"
done
#+end_src

** Flatpak programs

#+begin_src shell
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak update
#+end_src

#+begin_src shell
for program in "${FLATPAK_PROGRAMS[@]}"; do
    flatpak install "$program" -y
done
#+end_src

** Doom Emacs

#+begin_src shell
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
"$HOME/.emacs.d/bin/doom" install
"$HOME/.emacs.d/bin/doom" sync
rm -r "$HOME/.doom.d"
#+end_src

** Placing dotfiles

#+begin_src shell
stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles
#+end_src

* hardware-configuration.nix
:PROPERTIES:
:header-args: :tangle ./hardware-configuration.nix
:END:

#+begin_src nix
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];
  boot = {
    initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" ];
    initrd.kernelModules = [ ];
    kernelModules = [ ];
    extraModulePackages = [ ];
  };
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/55576cfc-09c8-473e-8e57-92f182579231";
    fsType = "ext4";
  };
  boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-uuid/db084812-d6c8-4a45-9f32-31fec142234b";
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/F6DE-EAFD";
    fsType = "vfat";
  };
  swapDevices = [ {device = "/swapfile"; size = 10000;} ];
  networking.useDHCP = lib.mkDefault true;
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

* configuration.nix
** Main

#+begin_src nix :tangle ./configuration.nix :noweb yes
{ config, pkgs, ... }:
let
  <<nixOS-variables>>
in {
  <<nixOS-parameters>>
}
#+end_src

** Variables
:PROPERTIES:
:header-args: :noweb-ref nixOS-variables
:END:

#+begin_src nix
user = "phrmendes";
home-manager = builtins.fetchTarball https://github.com/nix-community/home-manager/archive/master.tar.gz;
unstableTarball = builtins.fetchTarball https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz;
#+end_src

** Parameters
:PROPERTIES:
:header-args: :noweb-ref nixOS-parameters
:END:
*** Imports

#+begin_src nix
imports = [
    (import "${home-manager}/nixos")
    ./hardware-configuration.nix
    ./home.nix
  ];
#+end_src

*** Boot

#+begin_src nix
boot = {
  loader = {
    systemd-boot = {
      enable = true;
      configurationLimit = 5;
    };
    timeout = 5;
  };
  supportedFilesystems = [ "ntfs" ];
  kernelModules = [ "kvm-intel" ];
  kernelPackages = pkgs.linuxPackages_latest;
};
#+end_src

*** Networking

#+begin_src nix
networking = {
  hostName = "nixos-notebook";
  networkmanager.enable = true;
};
#+end_src

*** Timezone and locale

#+begin_src nix
time.timeZone = "America/Sao_Paulo";
i18n = {
  defaultLocale = "en_US.UTF-8";
  extraLocaleSettings = {
    LANGUAGE = "en_us.UTF-8";
    LC_MONETARY = "pt_BR.UTF8";
    LC_MEASUREMENT = "pt_BR.UTF8";
    LC_TIME = "pt_BR.UTF8";
    LC_NUMERIC = "pt_BR.UTF8";
  };
};
#+end_src

*** Console

#+begin_src nix
console = {
  font = "Lat2-Terminus16";
  keyMap = "us";
};
#+end_src

*** Fonts

#+begin_src nix
fonts = {
  enableDefaultFonts = true;
  fonts = with pkgs; [
    (nerdfonts.override { fonts = [ "SourceCodePro" ]; })
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    noto-fonts-extra
  ];
  fontconfig = {
    defaultFonts = {
      serif = [ "Noto Serif" ];
      sansSerif = [ "Noto Sans" ];
      monospace = [ "SourceCodePro" ];
    };
  };
};
#+end_src

*** Services

#+begin_src nix
services = {
  clipmenu.enable = true;
  openssh.enable = true;
  flatpak.enable = true;
  xserver = {
    enable = true;
    autorun = true;
    layout = "br";
    desktopManager.xterm.enable = false;
    desktopManager.plasma5 = {
      enable = true;
      excludePackages = with pkgs.libsForQt5; [
        elisa
        oxygen
        khelpcenter
        konsole
        print-manager
      ];
    };
    displayManager.sddm = {
      enable = true;
      autoNumlock = true;
      theme = "Nordic";
    };
    libinput = {
      enable = true;
      touchpad = {
        tapping = true;
        naturalScrolling = true;
      };
    };
  };
  journald.extraConfig = "SystemMaxUse=1G";
};
#+end_src

*** Sound

#+begin_src nix
sound = {
  enable = true;
  mediaKeys.enable = true;
};
#+end_src

*** Hardware

#+begin_src nix
hardware = {
  pulseaudio = {
    enable = true;
    package = pkgs.pulseaudioFull;
    extraConfig = "load-module module-switch-on-connect";
  };
  bluetooth = {
    enable = true;
    hsphfpd.enable = true;
    settings = {
      General = {
        Enable = "Source,Sink,Media,Socket";
      };
    };
  };
};
#+end_src

*** Users

#+begin_src nix
users.users.${user} = {
  isNormalUser = true;
  home = "/home/${user}";
  uid = 1000;
  extraGroups = [ "wheel" "video" "audio" "networkmanager" ];
  initialPassword = "password";
  shell = pkgs.bash;
};
#+end_src

*** System packages

#+begin_src nix
nixpkgs.config = {
  allowUnfree = true;
  allowBroken = true;
  packageOverrides = pkgs: {
    unstable = import unstableTarball {
      config = config.nixpkgs.config;
    };
  };
};
environment = {
  systemPackages = with pkgs; [
    zip
    curl
    unzip
    unrar
    git
    gzip
    vim
    gcc
    appimage-run
    nordic
    home-manager
  ];
};
programs.kdeconnect.enable = true;
programs.dconf.enable = true;
#+end_src

*** Nix

#+begin_src nix
nix = {
  settings = {
    auto-optimise-store = true;
    experimental-features = [ "nix-command" "flakes" ];
    trusted-users = ["root" "@wheel"];
  };
  gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };
  package = pkgs.nix;
};
#+end_src

*** System

#+begin_src nix
system = {
  stateVersion = "22.11";
  autoUpgrade.enable = true;
};
#+end_src

* home.nix
** Main

#+begin_src nix :tangle ./home.nix :noweb yes
{ config, pkgs, ... }:

let
  <<home-manager-variables>>
in {
  home-manager.users.${user} = {
    <<home-manager-parameters>>
  };
}
#+end_src

** Variables
:PROPERTIES:
:header-args: :noweb-ref home-manager-variables
:END:

#+begin_src nix
user = "phrmendes";
#+end_src

** Parameters
:PROPERTIES:
:header-args: :noweb-ref home-manager-parameters
:END:
*** Main

#+begin_src nix :noweb yes
home = {
  <<home>>
};
#+end_src

#+begin_src nix :noweb yes
programs = {
  <<programs>>
};
#+end_src

#+begin_src nix
xdg.enable = true;
xdg.mime.enable = true;
targets.genericLinux.enable = true;
#+end_src

*** home
:PROPERTIES:
:header-args: :noweb-ref home
:END:
**** Username

#+begin_src nix
username = "${user}";
#+end_src

**** Home directory

#+begin_src nix
homeDirectory = "/home/${user}";
#+end_src

**** Packages

#+begin_src nix :noweb yes
packages = with pkgs; [
    # terminal
    btop
    pandoc
    gh
    lazygit
    ripgrep
    fd
    sd
    tealdeer
    shellcheck
    ncdu
    micromamba
    niv
    lorri
    ranger
    stow
    exa
    sqlite
    hugo
    tectonic
    unstable.quarto
    # programming tools
    poetry
    python3Full
    cargo
    go
    nodejs
    # apps
    firefox
    chromium
    bitwarden
    pcloud
    zotero
    spotify
    podman
    cmdstan
    peek
    emacs
    ventoy-bin-full
    haruna
    libsForQt5.bismuth
    libsForQt5.ktorrent
    libsForQt5.filelight
    libsForQt5.kpmcore
    libsForQt5.nota
    libsForQt5.syntax-highlighting
    libsForQt5.ark
    # others
    aspell
    aspellDicts.en
    aspellDicts.pt_BR
  ];
stateVersion = "22.11";
sessionVariables = {
  EDITOR = "neovim";
  VISUAL = "neovim";
  TERMINAL = "alacritty";
};
#+end_src

*** programs
:PROPERTIES:
:header-args: :noweb-ref programs
:END:
**** home-manager

#+begin_src nix
home-manager.enable = true;
#+end_src

**** bat

#+begin_src nix
bat = {
  enable = true;
  config.theme = "Nord";
};
#+end_src

**** fzf

#+begin_src nix
fzf = {
  enable = true;
  enableFishIntegration = true;
};
#+end_src

**** direnv

#+begin_src nix
direnv = {
  enable = true;
  enableBashIntegration = true;
};
#+end_src

**** fish

#+begin_src nix
fish = {
  enable = true;
  shellAliases = {
    mkdir = "mkdir -p";
    cat = "${pkgs.bat}/bin/bat";
    nv = "${pkgs.neovim}/bin/nvim";
    lg = "${pkgs.lazygit}/bin/lazygit";
    ls = "${pkgs.exa}/bin/exa --icons";
    ll = "${pkgs.exa}/bin/exa --icons -l";
    la = "${pkgs.exa}/bin/exa --icons -a";
    lt = "${pkgs.exa}/bin/exa --icons --tree";
    lla = "${pkgs.exa}/bin/exa --icons -la";
  };
  shellAbbrs = {
    stow_dotfiles = "stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles";
    mamba = "${pkgs.micromamba}/bin/micromamba";
  };
  shellInit = ''
    fish_add_path "$HOME/.emacs.d/bin"
    set -gx MAMBA_EXE "${pkgs.micromamba}/bin/micromamba"
    set -gx MAMBA_ROOT_PREFIX "$HOME/micromamba"
    eval "${pkgs.micromamba}/bin/micromamba" shell hook --shell fish --prefix "$HOME/micromamba" | source
  '';
};
#+end_src

**** neovim

#+begin_src nix
neovim = {
  enable = true;
  plugins = with pkgs.vimPlugins; [
    nvim-web-devicons
    nvim-tree-lua
    plenary-nvim
    vim-nix
    vim-fish
    vim-easymotion
    vim-commentary
    vim-gitgutter
    vim-polyglot
    auto-pairs
    fzf-vim
    {
      plugin = nord-nvim;
      config = "colorscheme nord";
    }
    {
      plugin = indent-blankline-nvim;
      config = ''
        lua << EOF
        require("indent_blankline").setup()
        EOF
      '';
    }
    {
      plugin = lualine-nvim;
      config = ''
        lua << EOF
        require("lualine").setup({
            options = {
              icons_enabled = true,
              theme = "nord"
            }
        })
        EOF
      '';
    }
  ];
  extraConfig = ''
    set background=dark
    set clipboard+=unnamedplus
    set completeopt=noinsert,menuone,noselect
    set cursorline
    set hidden
    set inccommand=split
    set mouse=a
    set number
    set relativenumber
    set splitbelow splitright
    set title
    set ttimeoutlen=0
    set wildmenu
    set expandtab
    set shiftwidth=2
    set tabstop=2
  '';
  vimAlias = true;
  vimdiffAlias = true;
};
#+end_src

**** alacritty

#+begin_src nix
alacritty = {
  enable = true;
  settings = {
    window = {
      padding = {
        x = 15;
        y = 15;
      };
      class = {
        instance = "Alacritty";
        general = "Alacritty";
      };
      opacity = 1;
    };
    scrolling = {
      history = 10000;
      multiplier = 3;
    };
    font = {
      normal = {
        family = "SauceCodePro Nerd Font";
        style = "Medium";
      };
      bold = {
        family = "SauceCodePro Nerd Font";
        style = "Bold";
      };
      italic = {
        family = "SauceCodePro Nerd Font";
        style = "MediumItalic";
      };
      bold_italic = {
        family = "SauceCodePro Nerd Font";
        style = "BoldItalic";
      };
      size = 11;
    };
    draw_bold_text_with_bright_colors = true;
    selection.save_to_clipboard = true;
    shell.program = "${pkgs.fish}/bin/fish";
    colors = {
      primary = {
        background = "#2e3440";
        foreground = "#d8dee9";
        dim_foreground = "#a5abb6";
        footer_bar = {
          background = "#434c5e";
          foreground = "#d8dee9";
        };
      };
      cursor = {
        text = "#2e3440";
        cursor = "#d8dee9";
      };
      vi_mode_cursor = {
        text = "#2e3440";
        cursor = "#d8dee9";
      };
      selection = {
        text = "CellForeground";
        background = "#4c566a";
      };
      search = {
        matches = {
          foreground = "CellBackground";
          background = "#88c0d0";
        };
      };
      normal = {
        black = "#3b4252";
        red = "#bf616a";
        green = "#a3be8c";
        yellow = "#ebcb8b";
        blue = "#81a1c1";
        magenta = "#b48ead";
        cyan = "#88c0d0";
        white = "#e5e9f0";
      };
      bright = {
        black = "#4c566a";
        red = "#bf616a";
        green = "#a3be8c";
        yellow = "#ebcb8b";
        blue = "#81a1c1";
        magenta = "#b48ead";
        cyan = "#8fbcbb";
        white = "#eceff4";
      };
      dim = {
        black = "#373e4d";
        red = "#94545d";
        green = "#809575";
        yellow = "#b29e75";
        blue = "#68809a";
        magenta = "#8c738c";
        cyan = "#6d96a5";
        white = "#aeb3bb";
      };
    };
  };
};
#+end_src

**** starship

#+begin_src nix
starship = {
  enable = true;
  enableBashIntegration = true;
  enableFishIntegration = true;
};
#+end_src

* Updates

~nixos-rebuild switch~ after applying changes to the *.nix files.
