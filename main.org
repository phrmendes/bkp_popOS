#+title: NixOS Setup

* Installation script
:PROPERTIES:
:header-args: :tangle ./installation.sh
:END:

Download script: ~curl https://raw.githubusercontent.com/phrmendes/bkps/nixOS-pc/installation.sh --output ~/installation.sh~

** Variables

#+begin_src shell :shebang #!/usr/bin/env bash
GITHUB_URL="https://raw.githubusercontent.com/phrmendes/bkps/nixOS-pc"
NIX_FILES=("hardware-configuration.nix" "configuration.nix" "home.nix")
NIX_FILES_LOCATION="/mnt/etc/nixos/"
#+end_src

** Partitions
*** Create

#+begin_src shell 
sudo parted /dev/sdc -- mklabel gpt
sudo parted /dev/sdc -- mkpart primary 512MiB 100% # main partition
sudo parted /dev/sdc -- mkpart ESP fat32 1Mib 512MiB # efi
sudo parted /dev/sdc -- set 2 esp on
#+end_src

*** Encrypt

#+begin_src shell 
sudo cryptsetup luksFormat /dev/sdc1
sudo cryptsetup luksOpen /dev/sdc1 cryptroot
#+end_src

*** Format

#+begin_src shell 
sudo mkfs.fat -F 32 -n boot /dev/sdc2
sudo mkfs.ext4 -L nixos /dev/mapper/cryptroot
#+end_src

*** Mount

#+begin_src shell 
sudo mount /dev/mapper/cryptroot /mnt
sudo mkdir -p /mnt/boot
sudo mount /dev/sdc2 /mnt/boot
sudo mkdir -p /mnt/boot/efi
#+end_src

** Generate *.nix files

#+begin_src shell 
sudo nixos-generate-config --root /mnt
#+end_src

** Placing *.nix files

#+begin_src shell 
for i in "${NIX_FILES[@]}"; do
    sudo curl "$GITHUB_URL/$i" --output "$NIX_FILES_LOCATION/$i"
done
#+end_src

** Installation

#+begin_src shell 
sudo nixos-install
#+end_src

* Post-installation
:PROPERTIES:
:header-args: :tangle ./post-installation.sh
:END:
** Variables

#+begin_src shell :shebang #!/usr/bin/env bash
FLATPAK_PROGRAMS=("ch.protonmail.protonmail-bridge" "com.github.muriloventuroso.easyssh" "com.stremio.Stremio" "com.github.tchx84.Flatseal" "org.onlyoffice.desktopeditors")
MAIN_DIR="$(pwd)"
NIX_FILES=("hardware-configuration.nix" "configuration.nix" "home.nix")
#+end_src

** Creating symlinks to nix files

#+begin_src shell
sudo rm -r /etc/nixos/
sudo mkdir /etc/nixos/
#+end_src

#+begin_src shell
for file in "${NIX_FILES[@]}"; do
    sudo ln -s "$MAIN_DIR/$file" "/etc/nixos/"
done
#+end_src

** Flatpak programs

#+begin_src shell
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak update
#+end_src

#+begin_src shell
for program in "${FLATPAK_PROGRAMS[@]}"; do
    flatpak install "$program" -y
done
#+end_src

** Doom Emacs

#+begin_src shell
git clone --depth 1 https://github.com/doomemacs/doomemacs "$HOME/.emacs.d"
"$HOME/.emacs.d/bin/doom" install
"$HOME/.emacs.d/bin/doom" sync
rm -r "$HOME/.doom.d"
#+end_src

** Placing dotfiles

#+begin_src shell
stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles
#+end_src

** Restoring keybindings

#+begin_src shell
systemctl --user daemon-reload
systemctl --user enable startup.service
#+end_src

** npm

#+begin_src shell
mkdir $HOME/.npm-global
npm config set prefix "$HOME/.npm-global"
npm install -g git+https://gitlab.com/matsievskiysv/math-preview
#+end_src

* hardware-configuration.nix
:PROPERTIES:
:header-args: :tangle ./hardware-configuration.nix
:END:

#+begin_src nix
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" "v4l2loopback" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.v4l2loopback.out ];
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/0b248b0c-d9bf-438c-84f0-1431bcd87d9c";
    fsType = "ext4";
  };
  boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-uuid/975f382e-de1f-4447-ad21-2690a748026e";
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/8989-856E";
    fsType = "vfat";
  };
  swapDevices = [ {device = "/swapfile"; size = 10000;} ];
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

* configuration.nix
** Main

#+begin_src nix :tangle ./configuration.nix :noweb yes
{ config, pkgs, ... }:
let
  <<nixOS-variables>>
in {
  <<nixOS-parameters>>
}
#+end_src

** Variables
:PROPERTIES:
:header-args: :noweb-ref nixOS-variables
:END:

#+begin_src nix
user = "phrmendes";
home-manager = builtins.fetchTarball https://github.com/nix-community/home-manager/archive/master.tar.gz;
unstableTarball = builtins.fetchTarball https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz;
#+end_src

** Parameters
:PROPERTIES:
:header-args: :noweb-ref nixOS-parameters
:END:
*** Imports

#+begin_src nix
imports = [
    (import "${home-manager}/nixos")
    ./hardware-configuration.nix
    ./home.nix
  ];
#+end_src

*** Boot

#+begin_src nix
boot = {
  loader = {
    efi = {
      canTouchEfiVariables = true;
      efiSysMountPoint = "/boot";
    };
    systemd-boot = {
      enable = true;
      configurationLimit = 5;
    };
    timeout = 5;
  };
  supportedFilesystems = [ "ntfs" ];
  kernelPackages = pkgs.unstable.linuxPackages_latest;
};
#+end_src

*** Networking

#+begin_src nix
networking = {
  hostName = "nixos-desktop";
  networkmanager.enable = true;
};
#+end_src

*** Timezone and locale

#+begin_src nix
time.timeZone = "America/Sao_Paulo";
#+end_src

#+begin_src nix
i18n = {
  defaultLocale = "en_US.UTF-8";
  extraLocaleSettings = {
    LC_MONETARY = "pt_BR.UTF8";
    LC_MEASUREMENT = "pt_BR.UTF8";
    LC_NUMERIC = "pt_BR.UTF8";
  };
};
#+end_src

*** Console

#+begin_src nix
console = {
  font = "Lat2-Terminus16";
  keyMap = "us";
};
#+end_src

*** Fonts

#+begin_src nix
fonts = {
  enableDefaultFonts = true;
  fonts = with pkgs; [
    cantarell-fonts
    (nerdfonts.override { fonts = [ "SourceCodePro" ]; })
  ];
  fontconfig.defaultFonts = {
    serif = [ "Cantarell" ];
    sansSerif = [ "Cantarell" ];
    monospace = [ "SourceCodePro" ];
  };
};
#+end_src

*** Services

#+begin_src nix
services = {
  clipmenu.enable = true;
  openssh.enable = true;
  flatpak.enable = true;
  gnome.gnome-keyring.enable = true;
  gnome.core-utilities.enable = false;
  udev.packages = with pkgs; [ gnome.gnome-settings-daemon ];
  pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
  xserver = {
    enable = true;
    autorun = true;
    layout = "us,br";
    videoDrivers = [ "nvidia" ];
    displayManager.gdm.enable = true;
    desktopManager.gnome.enable = true;
    libinput = {
      enable = true;
      touchpad = {
        tapping = true;
        naturalScrolling = true;
      };
    };
  };
  journald.extraConfig = "SystemMaxUse=1G";
};
#+end_src

*** Security

#+begin_src nix
security.rtkit.enable = true;
#+end_src

*** Hardware

#+begin_src nix
hardware = {
  pulseaudio.enable = false;
  bluetooth = {
    enable = true;
    settings = {
      General = {
        Enable = "Source,Sink,Media,Socket";
      };
    };
  };
  opengl.enable = true;
  nvidia.package = pkgs.unstable.linuxKernel.packages.linux_6_2.nvidia_x11;
};
#+end_src

*** Users

#+begin_src nix
users.users.${user} = {
  isNormalUser = true;
  home = "/home/${user}";
  uid = 1000;
  extraGroups = [ "wheel" "video" "audio" "networkmanager" ];
  initialPassword = "password";
  shell = pkgs.bash;
};
#+end_src

*** System packages
    
#+begin_src nix
nixpkgs = {
  config = {
    allowUnfree = true;
    packageOverrides = pkgs: {
      unstable = import unstableTarball {
        config = config.nixpkgs.config;
      };
    };
  };
  overlays = [
    (import (builtins.fetchTarball {
      url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
    }))
  ];
};
#+end_src

#+begin_src nix
environment = {
  systemPackages = with pkgs;
    [
      zip
      curl
      wget
      unzip
      unrar
      git
      gzip
      vim
      gcc
      zlib
      gnumake
      cmake
      binutils
      appimage-run
      home-manager
      gnome.nautilus
      gnome.file-roller
      gnome.gnome-tweaks
      nautilus-open-any-terminal
      gnomeExtensions.appindicator
      gnomeExtensions.pop-shell
      gnomeExtensions.gsconnect
      gnomeExtensions.clipman
      gnomeExtensions.pop-launcher-super-key
      gnomeExtensions.espresso
      gnomeExtensions.unite
    ];
};
#+end_src

#+begin_src nix
programs = {
  seahorse.enable = true;
  dconf.enable = true;
};
#+end_src

*** Nix

#+begin_src nix
nix = {
  settings = {
    auto-optimise-store = true;
    experimental-features = [ "nix-command" "flakes" ];
    trusted-users = ["root" "@wheel"];
  };
  gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };
  package = pkgs.nix;
};
#+end_src

*** System

#+begin_src nix
system = {
  stateVersion = "22.11";
  autoUpgrade.enable = true;
};
#+end_src

* home.nix
** Main

#+begin_src nix :tangle ./home.nix :noweb yes
{ config, pkgs, ... }:

let
  <<home-manager-variables>>
in {
  home-manager.users.${user} = {
    <<home-manager-parameters>>
  };
}
#+end_src

** Variables
:PROPERTIES:
:header-args: :noweb-ref home-manager-variables
:END:

#+begin_src nix
user = "phrmendes";
#+end_src

** Parameters
:PROPERTIES:
:header-args: :noweb-ref home-manager-parameters
:END:
*** Main

#+begin_src nix :noweb yes
home = {
  <<home>>
};
#+end_src

#+begin_src nix :noweb yes
programs = {
  <<programs>>
};
#+end_src

#+begin_src nix :noweb yes
services = {
  <<services>>
};
#+end_src

#+begin_src nix :noweb yes
gtk = {
  <<gtk>>
};
#+end_src


#+begin_src nix :noweb yes
dconf = {
  <<dconf>>
};
#+end_src

#+begin_src nix
xdg.enable = true;
xdg.mime.enable = true;
targets.genericLinux.enable = true;
#+end_src

*** home
:PROPERTIES:
:header-args: :noweb-ref home
:END:
**** Username

#+begin_src nix
username = "${user}";
#+end_src

**** Home directory

#+begin_src nix
homeDirectory = "/home/${user}";
#+end_src

**** Stand-alone packages

#+begin_src nix
packages = (with pkgs.unstable; [
  # GUI apps
  pcloud
  zotero
  firefox
  chromium
  protonvpn-gui
  bitwarden
  spotify
  droidcam
  pop-launcher
  # CLI apps
  podman
  graphviz
  btop
  pandoc
  lazygit
  ripgrep
  fd
  sd
  gnupg
  stow
  exa
  sqlite
  jq
  hugo
  biber
  tere
  cmdstan
  gh
  quarto
  wmctrl
  # dictionaries
  ispell
  aspell
  aspellDicts.pt_BR
  aspellDicts.en
  # ansible
  ansible-lint
  ansible
  # terraform
  terraform
  tflint
  terragrunt
  # python
  python311
  python311Packages.ipython
  python311Packages.jupyter
  python311Packages.pytest
  ruff
  pipenv
  # go
  go
  gopls
  gotests
  gore
  gotools
  gomodifytags
  delve
  # nix
  rnix-lsp
  nixfmt
  # shell script
  shfmt
  shellcheck
  # latex
  texlab
  # others
  cargo
  nodejs
]) ++ (with pkgs; [
  tectonic
  baobab
  fragments
  celluloid
  gnome-text-editor
  gnome-photos
  gnome-solanum
]) ++ (with pkgs.gnome; [
  geary
  evince
  gnome-screenshot
  gnome-boxes
  gnome-disk-utility
  gnome-calculator
]);
#+end_src

#+begin_src nix
stateVersion = "22.11";
#+end_src

#+begin_src nix
sessionVariables = {
  VISUAL = "nvim";
  TERMINAL = "alacritty";
  SUDO_EDITOR = "nvim";
};
#+end_src

*** programs
:PROPERTIES:
:header-args: :noweb-ref programs
:END:
**** home-manager

#+begin_src nix
home-manager.enable = true;
#+end_src

**** bat

#+begin_src nix
bat.enable = true;
#+end_src

**** fzf

#+begin_src nix
fzf = {
  enable = true;
  enableFishIntegration = true;
};
#+end_src

**** direnv

#+begin_src nix
direnv = {
  enable = true;
  enableBashIntegration = true;
};
#+end_src

**** fish

#+begin_src nix
fish = {
  enable = true;
  shellAliases = {
    mkdir = "mkdir -p";
    cat = "${pkgs.bat}/bin/bat";
    lg = "${pkgs.lazygit}/bin/lazygit";
    ls = "${pkgs.exa}/bin/exa --icons";
    ll = "${pkgs.exa}/bin/exa --icons -l";
    la = "${pkgs.exa}/bin/exa --icons -a";
    lt = "${pkgs.exa}/bin/exa --icons --tree";
    lla = "${pkgs.exa}/bin/exa --icons -la";
  };
  shellAbbrs = {
    stow_dotfiles = "stow --target=$HOME --dir=$HOME/Projects/bkps/ --stow .dotfiles";
    nix_update = "sudo nixos-rebuild switch";
    nix_clean = "nix-collect-garbage";
  };
  shellInit = ''
    fish_add_path "$HOME/.config/emacs/bin"
    fish_add_path "$HOME/.npm-global/bin"
    dconf load /org/gnome/desktop/wm/keybindings/ < "$HOME/Projects/bkps/gnome-keybindings.txt"
    dconf load /org/gnome/settings-daemon/plugins/media-keys/ < "$HOME/Projects/bkps/gnome-custom-keybindings.txt"

    function tere
        set --local result (command tere $argv)
        [ -n "$result" ] && cd -- "$result"
    end
  '';
};
#+end_src

**** emacs

#+begin_src nix
emacs = {
  enable = true;
  extraPackages = (epkgs: [ epkgs.vterm ] );
};
#+end_src

**** neovim

#+begin_src nix
neovim = {
  enable = true;
  defaultEditor = true;
  plugins = with pkgs.vimPlugins; [
    nvim-web-devicons
    nvim-tree-lua
    plenary-nvim
    vim-nix
    vim-easymotion
    vim-commentary
    vim-gitgutter
    auto-pairs
    {
      plugin = indent-blankline-nvim;
      config = "lua require('indent_blankline').setup()";
    }
    {
      plugin = nvim-treesitter;
      config = ''
        lua << EOF
        require('nvim-treesitter.configs').setup {
            highlight = {
                enable = true,
                additional_vim_regex_highlighting = false
            }
        }
        EOF
      '';
    }
    {
      plugin = lualine-nvim;
      config = ''
        lua << EOF
        require('lualine').setup {
            options = {
                icons_enabled = true,
            }
        }
        EOF
      '';
    }
  ];
  extraLuaConfig = ''
    vim.o.background = 'dark'
    vim.o.clipboard = 'unnamedplus'
    vim.o.completeopt = 'noinsert,menuone,noselect'
    vim.o.cursorline = true
    vim.o.hidden = true
    vim.o.inccommand = 'split'
    vim.o.number = true
    vim.o.relativenumber = true
    vim.o.splitbelow = true
    vim.o.splitright = true
    vim.o.title = true
    vim.o.wildmenu = true
    vim.o.expandtab = true
    vim.o.ttimeoutlen = 0
    vim.o.shiftwidth = 2
    vim.o.tabstop = 2
    vim.o.undofile = true
    vim.o.smartindent = true
    vim.o.tabstop = 4
    vim.o.shiftwidth = 4
    vim.o.shiftround = true
    vim.o.expandtab = true
    vim.o.scrolloff = 3
  '';
  vimAlias = true;
  vimdiffAlias = true;
};
#+end_src

**** alacritty

#+begin_src nix
alacritty = {
  enable = true;
  settings = {
    window = {
      padding = {
        x = 15;
        y = 15;
      };
      class = {
        instance = "Alacritty";
        general = "Alacritty";
      };
      opacity = 1;
      decorations = "none";
    };
    scrolling = {
      history = 10000;
      multiplier = 3;
    };
    font = {
      normal = {
        family = "SauceCodePro Nerd Font";
        style = "Medium";
      };
      bold = {
        family = "SauceCodePro Nerd Font";
        style = "Bold";
      };
      italic = {
        family = "SauceCodePro Nerd Font";
        style = "MediumItalic";
      };
      bold_italic = {
        family = "SauceCodePro Nerd Font";
        style = "BoldItalic";
      };
      size = 11;
    };
    draw_bold_text_with_bright_colors = true;
    selection.save_to_clipboard = true;
    shell.program = "${pkgs.fish}/bin/fish";
  };
};
#+end_src

**** starship

#+begin_src nix
starship = {
  enable = true;
  enableBashIntegration = true;
  enableFishIntegration = true;
};
#+end_src

*** gtk
:PROPERTIES:
:header-args: :noweb-ref gtk
:END:

#+begin_src nix
enable = true;
iconTheme = {
  name = "Pop";
  package = pkgs.pop-icon-theme;
};
cursorTheme = {
  name = "Quintom_Ink";
  package = pkgs.quintom-cursor-theme;
};
gtk3.extraConfig = {
  Settings = "gtk-application-prefer-dark-theme=1";
};
gtk4.extraConfig = {
  Settings = "gtk-application-prefer-dark-theme=1";
};
#+end_src

*** dconf
:PROPERTIES:
:header-args: :noweb-ref dconf
:END:

#+begin_src nix
settings = {
  "org/gnome/shell" = {
    disable-user-extensions = false;
    enabled-extensions = [
      "appindicatorsupport@rgcjonas.gmail.com"
      "clipman@popov895.ukr.net"
      "gsconnect@andyholmes.github.io"
      "pop-shell@system76.com"
      "pop-launcher-super-key@ManeLippert"
      "espresso@coadmunkee.github.com"
      "unite@hardpixel.eu"
    ];
    favourite-apps = [
      "firefox.desktop"
      "Alacritty.desktop"
      "emacs.desktop"
      "org.gnome.Geary.desktop"
    ];
  };
  "org/gnome/shell/extensions/hidetopbar" = {
    enable-intellihide = true;
  };
  "org/gnome/desktop/interface" = {
    color-scheme = "prefer-dark";
    enable-hot-corners = false;
    font-antialiasing = "grayscale";
    font-hinting = "slight";
    toolkit-accessibility = false;
    font-name = "Cantarell 9";
  };

  "org/gnome/desktop/peripherals/touchpad" = {
    tap-to-click = true;
    two-finger-scrolling-enabled = true;
  };
  "org/gnome/shell/extensions/pop-shell" = {
    show-title = false;
    snap-to-grid = false;
    tile-by-default = true;
  };
  "org/gnome/shell/extensions/espresso" = {
    has-battery = true;
    show-notifications = false;
    user-enabled = true;
  };
  "org/gnome/shell/extensions/unite" = {
    app-menu-ellipsize-mode = "middle";
    app-menu-max-width = 0;
    autofocus-windows = true;
    desktop-name-text = "";
    enable-titlebar-actions = true;
    extend-left-box = false;
    greyscale-tray-icons = false;
    hide-activities-button = "always";
    hide-dropdown-arrows = true;
    hide-window-titlebars = "always";
    notifications-position = "center";
    show-legacy-tray = true;
    show-window-buttons = "never";
    show-window-title = "never";
    window-buttons-placement = "first";
  };
};
#+end_src

* Updates

~sudo nixos-rebuild switch~ after applying changes to the *.nix files.
