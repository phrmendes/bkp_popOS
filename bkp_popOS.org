#+title: Post-instalation - Pop!_OS 22.04 LTS
#+author: Pedro Mendes
#+PROPERTY: header-args:shell :tangle ./bkp.sh :mkdirp yes

* shebang

#+begin_src shell

  #!/bin/bash

#+end_src

* variables

#+begin_src shell

  DEB_URLS_FILE="deb_urls.txt"
  PROGRAMS_FILE="programs.txt"
  DIR_DOWNLOAD="$HOME/Downloads/deb_packages"
  PPAS_URLS_FILE="ppas.txt"
  R_PACKAGES_FILE="r_packages.R"
  TUTANOTA_LINK="https://mail.tutanota.com/desktop/tutanota-desktop-linux.AppImage"

#+end_src

* functions
** reading variables in files

#+begin_src shell

  reading_programs_variables () {
      PROGRAMS_APT=()
      PROGRAMS_FLATPAK=()
      PROGRAMS_SNAP=()
      PROGRAMS_BREW=()

      while IFS= read -r line; do
          local str_1=$(echo -e ${line%%,*})
          local str_2=$(echo -e ${line##*,})

          if [[ $str_2 = "apt" ]]; then
              PROGRAMS_APT+=("$str_1")
          elif [[ $str_2 = "flatpak" ]]; then
              PROGRAMS_FLATPAK+=("$str_1")
          elif [[ $str_2 = "snap" ]]; then
              PROGRAMS_SNAP+=("$str_1")
          else
              PROGRAMS_BREW+=("$str_1")
          fi
      done < $PROGRAMS_FILE 
  }

  reading_urls_deb () {
      PROGRAMS_DEB=()

      while IFS= read -r line; do
          PROGRAMS_DEB+=("$line")
      done < $DEB_URLS_FILE
  }

  reading_ppas_file () {
      PPAS=()

      while IFS= read -r line; do
          PPAS+=("$line")
      done < $PPAS_URLS_FILE
  }

#+end_src

** preparing installations

#+begin_src shell

  remove_locks () {
      echo -e "[INFO] - Removendo locks"
      sudo rm /var/lib/dpkg/lock-frontend
      sudo rm /var/cache/apt/archives/lock
  }

  add_i386_architecture () {
      echo -e "[INFO] - Adicionando arquitetura x86"
      sudo dpkg --add-architecture i386
  }

  att_repos () {
      echo -e "[INFO] - Atualizando repositórios"
      sudo apt update -y
  }

#+end_src

** .deb installations

#+begin_src shell

  download_deb () {
      mkdir "$DIR_DOWNLOAD"
      for url in ${PROGRAMS_DEB[@]}; do
          wget -c "$url" -P "$DIR_DOWNLOAD"
      done
  }

  install_deb () {
      echo -e "[INFO] - Download de pacotes .deb"
      download_deb
      echo -e "[INFO] - Instalando pacotes .deb"
      sudo dpkg -i $DIR_DOWNLOAD/*.deb
      echo -e "[INFO] - Instalando dependências"
      sudo apt -f install -y
  }

#+end_src

** apt installations

#+begin_src shell

  install_apt () {
      for program in ${PROGRAMS_APT[@]}; do
          echo -e "[INFO] - Instalando $program (apt)"
          sudo apt install $program -y
      done
  }

#+end_src

** flatpak instalations

#+begin_src shell

  install_flatpak () {
      for program in ${PROGRAMS_FLATPAK[@]}; do
          echo -e "[INFO] - Instalando $program (flatpak)"
          flatpak install $program -y
      done
  }

#+end_src

** snap instalations

#+begin_src shell

  install_snap () {
      for program in ${PROGRAMS_SNAP[@]}; do
          echo -e "[INFO] - Instalando $program (snap)"
          sudo snap install $program
      done
  }

#+end_src

** homebrew instalations

#+begin_src shell

  homebrew () {
      echo -e "[INFO] - Instalando homebrew"
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
      test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
      test -r ~/.zshrc && echo -e "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.zshrc
      echo -e "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.zshrc
  }

  install_brew () {
      for program in ${PROGRAMS_BREW[@]}; do
          echo -e "[INFO] - Instalando $program (brew)"
          brew install $program
      done
  }

#+end_src

** R packages installation

#+begin_src shell

    install_R_packages () {

        Rscript r_packages.R

    }

#+end_src

** upgrade and cleaning

#+begin_src shell

  upgrade () {
      sudo apt dist-upgrade -y
  }

  clean () {
      sudo apt autoclean
      sudo apt autoremove -y
  }
#+end_src

** adding ppa's

#+begin_src shell

  adding_ppas () {
      echo -e "[INFO] - Adicionando PPA's"
      for ppa in ${PPAS[@]}; do
          sudo add-apt-repository $ppa -y
      done
  }

#+end_src

** zsh and powerlevel10k 

#+begin_src shell

  zsh_p10k () {

      echo -e "source $(brew --prefix)/opt/powerlevel10k/powerlevel10k.zsh-theme" >> ~/.zshrc
      chsh -s $(which zsh)

  }

  zsh_p10k_root () {

      zsh && p10k configure

      local files=(powerlevel10k .zshrc .p10k.zsh)

      for i in ${files[@]}; do
          sudo ln -s $HOME/$i /root/$i
          sudo chmod 744 /root/$i
      done

  }

#+end_src

** tutanota

#+begin_src shell

  tutanota_download () {

      mkdir $HOME/appimages/
      wget -c "$TUTANOTA_LINK" -P $HOME/appimages/ 

  }

#+end_src

* dependencies

#+begin_src shell

  if [[ ! -x `which wget` ]]; then
      sudo apt install wget -y
  fi
 
#+end_src

* execution

#+begin_src shell

  reading_programs_variables
  reading_urls_deb
  reading_ppas_file
  remove_locks
  add_i386_architecture
  att_repos
  adding_ppas
  upgrade
  homebrew
  install_apt
  install_deb
  install_flatpak
  install_snap
  install_brew
  tutanota_download
  install_R_packages
  zsh_p10k
  zsh_p10k_root
  clean

  sudo rm -r $DIR_DOWNLOAD

  echo -e "[INFO] - Finalizado"

#+end_src
