#+title: NixOS Setup
#+property: header-args:nix

* Partitioning and mounting

Download script: ~curl https://raw.githubusercontent.com/phrmendes/bkps/main/installation-setup.sh --output installation-setup.sh~

#+begin_src shell :tangle ./installation-setup.sh

#!/usr/bin/env bash

# variables

GITHUB_URL="https://raw.githubusercontent.com/phrmendes/bkps/main/flake"

# create partitions
sudo parted /dev/sda -- mklabel gpt
sudo parted /dev/sda -- mkpart primary 512MiB 100% # main partition
sudo parted /dev/sda -- mkpart ESP fat32 1Mib 512MiB # efi
sudo parted /dev/sda -- set 2 esp on

# encryption
sudo cryptsetup luksFormat /dev/sda1

# open encrypted partition
sudo cryptsetup luksOpen /dev/sda1 cryptroot

# format partitions
sudo mkfs.fat -F 32 -n boot /dev/sda2
sudo mkfs.ext4 -L nixos /dev/mapper/cryptroot

# mounting partitions
sudo mount /dev/disk/by-label/nixos /mnt
sudo mkdir -p /mnt/boot/efi
sudo mount /dev/sda2 /mnt/boot

# generate *.nix files
sudo nixos-generate-config --root /mnt

#+end_src

* flake.nix

#+begin_src nix :tangle ./flake/flake.nix

{
  description = "Personal flake";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs {
        inherit system;
        config.allowUnfree = true;
      };
      lib = nixpkgs.lib;
      user = "phrmendes";
    in {
      nixosConfigurations = {
        ${user} = lib.nixosSystem {
          inherit system pkgs;
          modules = [
            ./configuration.nix
            home-manager.nixosModules.home-manager {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.${user} = {
                imports = [ ./home.nix ];
              };
            }
          ];
        };
      };
    };
}

#+end_src

* configuration.nix

#+begin_src nix :tangle ./flake/configuration.nix

{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  imports =
    [
      ./hardware-configuration.nix
    ];

  fileSystems."/".options = [ "noatime" "nodiratime" "discard" ];

  boot = {
    loader = {
      grub = {
        enable = true;
        version = 2;
        efiSupport = true;
        devices = [ "nodev" ];
        gfxmodeEfi = "1024x768";
        configurationLimit = 5; # number of listed generations in grub
      };
      efi = {
        efiSysMountPoint = "/boot/efi";
        canTouchEfiVariables = true;
      };
      timeout = 5;
    };
    kernelPackages = pkgs.linuxPackages_latest;
  };

  networking = {
    hostName = "nixos";
    networkmanager.enable = true;  # for pc
    # wireless.enable = true; # for laptop
  };

  time.timeZone = "America/Sao_Paulo";

  i18n.defaultLocale = "en_US.UTF-8";

  console = {
    font = "Lat2-Terminus16";
    keyMap = "us";
  };

  fonts.fonts = with pkgs; [
    (nerdfonts.override { fonts = [ "SourceCodePro" ]; })
  ];

  services = {
    openssh.enable = true;
    xserver = {
      enable = true;
      layout = "us,br";
      desktopManager.xfce.enable = true;
      displayManager = {
        defaultSession = "xfce+bspwm";
        lightdm = {
          greeters.pantheon.enable = true;
        };
      };
    };
    windowManager.bspwm.enable = true;
    # for laptop
    # libinput = {
    #   enable = true;
    #   tapping = true;
    #   naturalScrolling = true;
    # };
  };

  sound = {
    enable = true;
    mediaKeys.enable = true;
  };

  hardware = {
    pulseaudio = {
      enable = true;
      package = pkgs.pulseaudioFull;
      extraConfig = ''
        load-module module-switch-on-connect
      '';
    };
    bluetooth = {
      enable = true;
      hsphfpd.enable = true;
      settings = {
        General = {
          Enable = "Source,Sink,Media,Socket";
        };
      };
    };
  };

  users.users.${user} = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "wheel" "video" "audio" "networkmanager" ];
    initialPassword = "password";
    shell = pkgs.bash;
  };

  environment = {
    systemPackages = with pkgs; [
      vim
      zip
      unzip
      unrar
      tree
      git
      gzip
    ];
  };

  nix = {
    settings.auto-optimise-store = true;
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
  };

  nix = {
    package = pkgs.nixFlakes;
    extraOptions = "experimental-features = nix-command flakes";
  };

  system.stateVersion = "22.05";
}

#+end_src

* home.nix

#+begin_src nix :tangle ./flake/home.nix

{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  home = {
    username = "${user}";
    homeDirectory = "/home/${user}";
    packages = with pkgs; [
      # TERMINAL
      btop
      pandoc
      bat
      btop
      gh
      lazygit
      ripgrep
      fd
      sd
      tealdeer
      exa
      shellcheck
      automake
      cmake
      fish
      alacritty
      ncdu
      gnupg
      starship
      file
      procps
      # TEXT EDITORS
      neovim
      emacs
      # PACKAGE MANAGERS
      flatpak
      cargo
      go
      nodejs
      # FILE MANAGERS
      thunar-archive-plugin
      filezilla
      # APPS
      droidcam
      keepassxc
      solaar
      stremio
      tutanota
      bitwarden
      pcloud
      onlyoffice-bin
      zotero
      spotify
      fragments
      kooha
      podman
      zathura
      # TWM APPS
      sxhkd
      rofi
      compton
      # OTHERS
      aspellDicts.en
      aspellDicts.pt_BR
      texlive.combined.scheme-minimal
    ];
    pointerCursor = {
      name = "Dracula-cursors";
      package = pkgs.dracula-theme;
      size = 16;
    };
    stateVersion = "22.05";
    sessionVariables = {
      EDITOR = "neovim";
    };
  };

  programs = {
    fish = {
      enable = true;
      shellAliases = {
        rm = "rm -i";
        cp = "cp -i";
        mv = "mv -i";
        mkdir = "mkdir -p";
        ls = "exa --icons";
        cat = "bat";
      };
      shellAbbrs = {
        nv = "nvim";
        lg = "lazygit";
      };
      shellInit = ''
        set -gx STARSHIP_CONFIG "$HOME"/.config/starship/starship.toml
        starship init fish | source
      '';
      plugins = [
        {
          name = "nix-env";
          src = pkgs.fetchFromGitHub {
            owner = "lilyball";
            repo = "nix-env.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }

        {
          name = "autopair.fish";
          src = pkgs.fetchFromGithub {
            owner = "jorgebucaran";
            repo = "autopair.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }

        {
          name = "fzf";
          src = pkgs.fetchFromGithub {
            owner = "PatrickF1";
            repo = "fzf.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }
      ];
    };
    bat = {
      enable = true;
      config = {
        theme = "GitHub";
        italic-text = "always";
    };
    git = {
      enable = true;
      userName = "Pedro Mendes";
      userEmail = "phrmendes@tuta.io";
    };

    home-manager.enable = true;
  };

  gtk = {
    enable = true;
    font.name = "SauceCodePro Nerd Font";
  };
}
#+end_src

* Placing *.nix files

#+begin_src shell :tangle ./installation-setup.sh

# downloading configuration.nix file
sudo curl "$GITHUB_URL/configuration.nix" --output /mnt/etc/nixos/configuration.nix
sudo curl "$GITHUB_URL/flake.nix" --output /mnt/etc/nixos/flake.nix

# adding swap
sudo sed -i 's/swapDevices = \[ \];/swapDevices = \[\{device = "\/swapfile"; size = 10000;\}\];/g' /mnt/etc/nixos/hardware-configuration.nix

#+end_src

* Installation

#+begin_src shell :tangle ./installation-setup.sh

# downloading configuration.nix file
sudo mkdir /mnt/flake
sudo curl "$GITHUB_URL/configuration.nix" --output /mnt/flake/configuration.nix
sudo curl "$GITHUB_URL/flake.nix" --output /mnt/flake/flake.nix

# creating hardware-configuration.nix
sudo sed -i 's/swapDevices = \[ \];/swapDevices = \[\{device = "\/swapfile"; size = 10000;\}\];/g' /mnt/etc/nixos/hardware-configuration.nix
cp /mnt/etc/nixos/hardware-configuration.nix /mnt
sudo rm -r /mnt/etc/nixos

# installing
nixos-install --flake .#"$USER"

#+end_src

Updates: ~nix flake update~ and ~nixos-rebuild switch --flake .#phrmendes~ after applying changes to the ~*.nix~ files.
