#+title: NixOS Setup
#+property: header-args:nix

* Partitioning and mounting

Download script: ~curl https://raw.githubusercontent.com/phrmendes/bkps/main/installation-setup.sh --output installation-setup.sh~

#+begin_src shell :tangle ./installation-setup.sh

#!/usr/bin/env bash

# variables

GITHUB_URL="https://raw.githubusercontent.com/phrmendes/bkps/main/flake"
FLAKE_DIR="/mnt/flake"
NIX_FILES=("configuration.nix" "flake.nix" "home.nix")

# create partitions
sudo parted /dev/sda -- mklabel gpt
sudo parted /dev/sda -- mkpart primary 512MiB 100% # main partition
sudo parted /dev/sda -- mkpart ESP fat32 1Mib 512MiB # efi
sudo parted /dev/sda -- set 2 esp on

# encryption
sudo cryptsetup luksFormat /dev/sda1

# open encrypted partition
sudo cryptsetup luksOpen /dev/sda1 cryptroot

# format partitions
sudo mkfs.fat -F 32 -n boot /dev/sda2
sudo mkfs.ext4 -L nixos /dev/mapper/cryptroot

# mounting partitions
sudo mount /dev/disk/by-label/nixos /mnt
sudo mkdir -p /mnt/boot/efi
sudo mount /dev/sda2 /mnt/boot

# generate *.nix files
sudo nixos-generate-config --root /mnt

#+end_src

* flake.nix

#+begin_src nix :tangle ./flake/flake.nix

{
  description = "Personal flake";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";
    nixpkgs-unstable.url = "nixpkgs/nixpkgs-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs {
        inherit system;
        config.allowUnfree = true;
      };
      lib = nixpkgs.lib;
      user = "phrmendes";
    in {
      nixosConfigurations = {
        ${user} = lib.nixosSystem {
          inherit system pkgs;
          modules = [
            ./configuration.nix
            home-manager.nixosModules.home-manager {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.${user} = {
                imports = [ ./home.nix ];
              };
            }
          ];
        };
      };
    };
}

#+end_src

* configuration.nix

#+begin_src nix :tangle ./flake/configuration.nix

{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  imports =
    [
      ./hardware-configuration.nix
    ];

  fileSystems."/".options = [ "noatime" "nodiratime" "discard" ];

  boot = {
    loader = {
      grub = {
        enable = true;
        version = 2;
        efiSupport = true;
        devices = [ "nodev" ];
        gfxmodeEfi = "1024x768";
        configurationLimit = 5; # number of listed generations in grub
      };
      efi = {
        efiSysMountPoint = "/boot/efi";
        canTouchEfiVariables = true;
      };
      timeout = 5;
    };
    kernelPackages = pkgs.linuxPackages_latest;
  };

  networking = {
    hostName = "nixos";
    networkmanager.enable = true;  # for pc
    # wireless.enable = true; # for laptop
  };

  time.timeZone = "America/Sao_Paulo";

  i18n.defaultLocale = "en_US.UTF-8";

  console = {
    font = "Lat2-Terminus16";
    keyMap = "us";
  };

  fonts.fonts = with pkgs; [
    (nerdfonts.override { fonts = [ "SourceCodePro" ]; })
  ];

  services = {
    openssh.enable = true;
    xserver = {
      enable = true;
      layout = "us,br";
      desktopManager.gnome.enable = true;
      displayManager.gdm.enable = true;
      excludePackages = [ pkgs.xterm ];
    };
    udev.packages = with pkgs; [ gnome.gnome-settings-daemon ];
    gnome.core-utilities.enable = false;
    # for laptop
    # libinput = {
    #   enable = true;
    #   tapping = true;
    #   naturalScrolling = true;
    # };
  };

  sound = {
    enable = true;
    mediaKeys.enable = true;
  };

  hardware = {
    pulseaudio = {
      enable = true;
      package = pkgs.pulseaudioFull;
      extraConfig = ''
        load-module module-switch-on-connect
      '';
    };
    bluetooth = {
      enable = true;
      hsphfpd.enable = true;
      settings = {
        General = {
          Enable = "Source,Sink,Media,Socket";
        };
      };
    };
  };

  users.users.${user} = {
    isNormalUser = true;
    uid = 1000;
    extraGroups = [ "wheel" "video" "audio" "networkmanager" ];
    initialPassword = "password";
    shell = pkgs.bash;
  };

  environment = {
    systemPackages = with pkgs; [
      zip
      unzip
      unrar
      tree
      git
      gzip
      pop-gtk-theme
      gnomeExtensions.pop-shell
      gnomeExtensions.caffeine
      gnomeExtensions.appindicator
      gnomeExtensions.vitals
      gnomeExtensions.gsconnect
      gnomeExtensions.clipboard-indicator
      gnomeExtensions.sound-output-device-chooser
    ];
  };

  nix = {
    settings.auto-optimise-store = true;
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
  };

  nix = {
    package = pkgs.nixFlakes;
    extraOptions = "experimental-features = nix-command flakes";
  };

  system.stateVersion = "22.05";
}

#+end_src

* home.nix

#+begin_src nix :tangle ./flake/home.nix

{ config, pkgs, ... }:

let
  user = "phrmendes";
in {
  home = {
    username = "${user}";
    homeDirectory = "/home/${user}";
    packages = with pkgs; [
      # TERMINAL
      btop
      pandoc
      bat
      btop
      gh
      lazygit
      ripgrep
      fd
      sd
      tealdeer
      exa
      shellcheck
      automake
      cmake
      fish
      alacritty
      ncdu
      gnupg
      starship
      file
      procps
      quarto
      # TEXT EDITORS
      neovim
      emacs
      # PACKAGE MANAGERS
      flatpak
      cargo
      go
      nodejs
      # FILE MANAGERS
      thunar-archive-plugin
      filezilla
      # APPS
      droidcam
      keepassxc
      solaar
      stremio
      tutanota
      bitwarden
      pcloud
      onlyoffice-bin
      zotero
      spotify
      fragments
      kooha
      podman
      zathura
      cmdstan
      # BASIC R PACKAGES
      rPackages.tidyverse
      rPackages.data_table
      rPackages.quarto
      rPackages.janitor
      rPackages.pbapply
      rPackages.styler
      rPackages.lintr
      rPackages.fs
      rPackages.distill
      rPackages.tinytex
      rPackages.languageserver
      rPackages.writexl
      rPackages.arrow
      rPackages.duckdb
      rPackages.devtools
      rPackages.usethis
      rPackages.assertthat
      rPackages.testthat
      # BASIC PYTHON PACKAGES
      python310Packages.pandas
      python310Packages.polars
      python310Packages.matplotlib
      python310Packages.numpy
      python310Packages.scipy
      python310Packages.scikit-learn
      python310Packages.pyarrow
      python310Packages.sympy
      # OTHERS
      aspellDicts.en
      aspellDicts.pt_BR
      texlive.combined.scheme-minimal
    ];
    stateVersion = "22.05";
    sessionVariables = {
      EDITOR = "neovim";
    };
  };

  programs = {
    fish = {
      enable = true;
      shellAliases = {
        rm = "rm -i";
        cp = "cp -i";
        mv = "mv -i";
        mkdir = "mkdir -p";
        ls = "exa --icons";
        cat = "bat";
      };
      shellAbbrs = {
        nv = "nvim";
        lg = "lazygit";
      };
      plugins = [
        {
          name = "nix-env";
          src = pkgs.fetchFromGitHub {
            owner = "lilyball";
            repo = "nix-env.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }
        {
          name = "autopair.fish";
          src = pkgs.fetchFromGithub {
            owner = "jorgebucaran";
            repo = "autopair.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }
        {
          name = "fzf";
          src = pkgs.fetchFromGithub {
            owner = "PatrickF1";
            repo = "fzf.fish";
            sha256 = "0000000000000000000000000000000000000000000000000000";
          };
        }
      ];
    };
    git = {
      enable = true;
      userName = "Pedro Mendes";
      userEmail = "phrmendes@tuta.io";
    };
    neovim = {
      enable = true;
      plugins = with pkgs.vimPlugins; [
        vim-easymotion
        vim-commentary
        lightline.vim
        nerdcommenter
        ack.vim
        vim-gitgutter
        auto-pairs
        fzf.vim
        vim-polyglot
      ];
      extraConfig = ''
        set background=dark
        set clipboard=unnamedplus
        set completeopt=noinsert,menuone,noselect
        set cursorline
        set hidden
        set inccommand=split
        set mouse=a
        set number
        set relativenumber
        set splitbelow splitright
        set title
        set ttimeoutlen=0
        set wildmenu
        set expandtab
        set shiftwidth=2
        set tabstop=2
      '';
      vimAlias = true;
      vimdiffAlias = true;
    };
    alacritty = {
      enable = true;
      settings = {
        window = {
          padding = {
            x = 15;
            y = 15;
          };
          class = {
            instance = "Alacritty";
            general = "Alacritty";
          };
          opacity = 1;
        };
        scrolling = {
          history = 10000;
          multiplier = 3;
        };
        font = {
          normal = {
            family = "SauceCodePro Nerd Font";
            style = "Medium";
          };
          bold = {
            family = "SauceCodePro Nerd Font";
            style = "Bold";
          };
          italic = {
            family = "SauceCodePro Nerd Font";
            style = "MediumItalic";
          };
          bold_italic = {
            family = "SauceCodePro Nerd Font";
            style = "BoldItalic";
          };
          size = 13;
        };
        draw_bold_text_with_bright_colors = true;
        selection.save_to_clipboard = true;
        shell.program = "${pkgs.fish}/bin/fish";
        colors = {
          primary = {
            background = "0x282828";
            foreground = "0xebdbb2";
          };
          normal = {
            black = "0x282828";
            red = "0xcc241d";
            green = "0x98971a";
            yellow = "0xd79921";
            blue = "0x458588";
            magenta = "0xb16286";
            cyan = "0x689d6a";
            white = "0xa89984";
          };
          bright = {
            black = "0x928374";
            red = "0xfb4934";
            green = "0xb8bb26";
            yellow = "0xfabd2f";
            blue = "0x83a598";
            magenta = "0xd3869b";
            cyan = "0x8ec07c";
            white = "0xebdbb2";
          };
        };
      };
    };
    starship = {
      enable = true;
      enableFishIntegration = true;
    };
    home-manager.enable = true;
  };
}

#+end_src

* Placing *.nix files

#+begin_src shell :tangle ./installation-setup.sh

# downloading configuration.nix file
sudo mkdir "$FLAKE_DIR/"

for i in "${NIX_FILES[@]}"; do
    sudo curl "$GITHUB_URL/$i" --output "$FLAKE_DIR/$i"
done

# creating hardware-configuration.nix
sudo sed -i 's/swapDevices = \[ \];/swapDevices = \[\{device = "\/swapfile"; size = 10000;\}\];/g' /mnt/etc/nixos/hardware-configuration.nix

sudo cp /mnt/etc/nixos/hardware-configuration.nix "$FLAKE_DIR"

sudo rm -r /mnt/etc/nixos

#+end_src

* Installation

#+begin_src shell :tangle ./installation-setup.sh

# installing
sudo nixos-install --flake .#phrmendes

#+end_src

Updates: ~nix flake update~ and ~nixos-rebuild switch --flake .#phrmendes~ after applying changes to the ~*.nix~ files.

* Post-install script

#+begin_src shell :tangle ./post-installation-setup.fish

# flathub and flatpak apps
for program in a b c
    flatpak install "$program" -y
end

# doom emacs
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
"$HOME/.emacs.d/bin/doom" install
"$HOME/.emacs.d/bin/doom" sync
fish_add_path "$HOME/.emacs.d/bin"
ln -s "$(pwd)/.doom.d" "$HOME"/

#+end_src
